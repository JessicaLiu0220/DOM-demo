{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","didi","parentNode","insertBefore","nextSiling","before","gege","append","parent","appendChild","wrap","remove","removeChild","empty","childNodes","array","x","push","attr","name","value","arguments","length","setAttribute","text","innerText","textContent","html","style","Object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","arr","Array","from","filter","n","next","nextSibling","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.be574493.map","sourceRoot":"../src","sourcesContent":["window.dom = {\n    //创建元素：首先定义一个container容器放创建的新标签，template可以放入任意元素，\n    //利用innerHTML将容器中的内容变成string，trim（）的作用是去掉字符串两侧的空格\n    //最后返回firstChild。\n    create(string) {\n        const container = document.createElement(\"template\")\n        container.innerHTML = string.trim();\n        return container.content.firstChild;\n    },\n    // 插入后一个兄弟元素：插入node下一个节点的前面，相当于插入node的后面\n    after(node, didi) {\n        node.parentNode.insertBefore(didi, node.nextSiling);\n    },\n    //插入一个哥哥元素\n    before(node, gege) {\n        node.parentNode.insertBefore(gege, node)\n    },\n    //新增一个子元素\n    append(parent, node) {\n        parent.appendChild(node);\n    },\n    //新增一个父元素：把父元素插入到子元素之前，再将子元素插入到父元素中，原来的子元素的位置就会移开\n    wrap(node, parent) {\n        dom.before(node, parent)\n        dom.append(parent, node)\n\n    },\n    //删除元素\n    remove(node) {\n        node.parentNode.removeChild(node);\n        return node;\n    },\n    //删除所有子元素:用while判断node的第一个子节点是否存在，存在就执行删除操作，并把删除的值放到数组中\n    //当x不存在即node子元素删除完结束循环，返还被删除的元素的数组。\n    empty(node) {\n        const childNodes = node.childNodes;\n        const array = [];\n        let x = node.firstChild;\n        while (x) {\n            array.push(dom.remove(x));\n            x = node.firstChild\n        }\n        return array;\n    },\n    //修改或查看元素的属性值：当参数的长度为3时，为修改node属性值\n    //当参数的长度为2时，为查看node中的某一属性值\n    attr(node, name, value) {\n        if (arguments.length === 3) {\n            node.setAttribute(name, value)\n        } else if (arguments.length === 2) {\n            return node.setAttribute(name)\n        }\n    },\n    //读写文本内容\n    text(node, string) {\n        if (arguments.length === 2) {\n            if ('innerText' in node) {\n                node.innerText = string;\n            } else {\n                node.textContent = string;\n            }\n        } else if (arguments.length === 1) {\n            if ('innerText' in node) {\n                return node.innerText;\n            } else {\n                return node.textContent;\n            }\n        }\n\n    },\n    //读写html内容\n    html(node, string) {\n        if (arguments.length === 2) {\n            node.innerHTML = string;\n        } else if (arguments.length === 1) {\n            return node.innerHTML;\n        }\n    },\n    //读取或修改style属性\n    style(node, name, value) {\n        //style(text,'color','red'),当长度为3时修改name的value值\n        if (arguments.length === 3) {\n            node.style[name] = value;\n        } else if (arguments.length === 2) {\n            if (typeof name === 'string') {\n                //style(test,'color')，长度为2且name类型为string时查看name属性值\n                return node.style[name];\n            } else if (name instanceof Object) {\n                //style(test,{color:'red'})长度为2且name为对象时修改name的style\n                for (let key in name)\n                    node.style[key] = name[key]\n            }\n        }\n    },\n    //添加class\n    class: {\n        add(node, className) {\n            node.classList.add(className)\n        },\n        remove(node, className) {\n            node.classList.remove(className)\n        },\n        has(node, className) {//判断node节点的指定类名是否存在\n            return node.classList.contains(className)//存在返回true，不存在返回false\n        }\n    },\n    //添加事件\n    on(node, eventName, fn) {\n        node.addEventListener(eventName, fn)\n    },\n    //删除事件\n    off(node, eventName, fn) {\n        node.removeEventListener(eventName, fn)\n    },\n    //查找或获取标签\n    find(selector, scope) {\n        return document.querySelectorAll(selector);\n    },\n    //查找父元素\n    parent(node) {\n        return node.parentNode;\n    },\n    //查找子元素\n    children(node) {\n        return node.children;\n    },\n    //查找兄弟元素\n    siblings(node) {//查找元素的父元素下的所有子元素，再把元素本身过滤出来即可得到剩余的兄弟元素\n        const arr = Array.from(node.parentNode.children).filter(n => n !== node);\n        return arr;\n    },\n    //获取下一个节点\n    next(node) {\n        let x = node.nextSibling\n        while (x && x.nodeType === 3) {\n            x = x.nextSibling\n        }\n        return x\n    },\n    //获取上一个节点元素\n    previous(node) {\n        let x = node.previousSibling\n        while (x && x.nodeType === 3) {\n            x = x.previousSibling\n        }\n        return x\n    },\n    //遍历所有节点\n    each(nodeList, fn) {\n        for (let i = 0; i < nodeList.length; i++) {\n            fn.call(null, nodeList[i])\n        }\n    },\n    //获取元素下标\n    index(node) {\n        const list = dom.children(node.parentNode)\n        let i\n        for (i = 0; i < list.length; i++) {\n            if (list[i] === node) {\n                break\n            }\n        }\n        return i\n    }\n\n}"]}